// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gessnerfl/terraform-provider-instana/instana/restapi (interfaces: UserRoleResource)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	restapi "github.com/gessnerfl/terraform-provider-instana/instana/restapi"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRoleResource is a mock of UserRoleResource interface
type MockUserRoleResource struct {
	ctrl     *gomock.Controller
	recorder *MockUserRoleResourceMockRecorder
}

// MockUserRoleResourceMockRecorder is the mock recorder for MockUserRoleResource
type MockUserRoleResourceMockRecorder struct {
	mock *MockUserRoleResource
}

// NewMockUserRoleResource creates a new mock instance
func NewMockUserRoleResource(ctrl *gomock.Controller) *MockUserRoleResource {
	mock := &MockUserRoleResource{ctrl: ctrl}
	mock.recorder = &MockUserRoleResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRoleResource) EXPECT() *MockUserRoleResourceMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockUserRoleResource) Delete(arg0 restapi.UserRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockUserRoleResourceMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserRoleResource)(nil).Delete), arg0)
}

// DeleteByID mocks base method
func (m *MockUserRoleResource) DeleteByID(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID
func (mr *MockUserRoleResourceMockRecorder) DeleteByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockUserRoleResource)(nil).DeleteByID), arg0)
}

// GetOne mocks base method
func (m *MockUserRoleResource) GetOne(arg0 string) (restapi.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", arg0)
	ret0, _ := ret[0].(restapi.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne
func (mr *MockUserRoleResourceMockRecorder) GetOne(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockUserRoleResource)(nil).GetOne), arg0)
}

// Upsert mocks base method
func (m *MockUserRoleResource) Upsert(arg0 restapi.UserRole) (restapi.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", arg0)
	ret0, _ := ret[0].(restapi.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upsert indicates an expected call of Upsert
func (mr *MockUserRoleResourceMockRecorder) Upsert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockUserRoleResource)(nil).Upsert), arg0)
}
