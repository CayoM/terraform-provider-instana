// Code generated by MockGen. DO NOT EDIT.
// Source: instana/restapi/rest-client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	restapi "github.com/gessnerfl/terraform-provider-instana/instana/restapi"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRestClient is a mock of RestClient interface
type MockRestClient struct {
	ctrl     *gomock.Controller
	recorder *MockRestClientMockRecorder
}

// MockRestClientMockRecorder is the mock recorder for MockRestClient
type MockRestClientMockRecorder struct {
	mock *MockRestClient
}

// NewMockRestClient creates a new mock instance
func NewMockRestClient(ctrl *gomock.Controller) *MockRestClient {
	mock := &MockRestClient{ctrl: ctrl}
	mock.recorder = &MockRestClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRestClient) EXPECT() *MockRestClientMockRecorder {
	return m.recorder
}

// GetOne mocks base method
func (m *MockRestClient) GetOne(id, resourcePath string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", id, resourcePath)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne
func (mr *MockRestClientMockRecorder) GetOne(id, resourcePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockRestClient)(nil).GetOne), id, resourcePath)
}

// Put mocks base method
func (m *MockRestClient) Put(data restapi.InstanaDataObject, resourcePath string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", data, resourcePath)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put
func (mr *MockRestClientMockRecorder) Put(data, resourcePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockRestClient)(nil).Put), data, resourcePath)
}

// Delete mocks base method
func (m *MockRestClient) Delete(resourceID, resourceBasePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", resourceID, resourceBasePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRestClientMockRecorder) Delete(resourceID, resourceBasePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRestClient)(nil).Delete), resourceID, resourceBasePath)
}

// PostByQuery mocks base method
func (m *MockRestClient) PostByQuery(resourcePath string, queryParams map[string]string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostByQuery", resourcePath, queryParams)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostByQuery indicates an expected call of PostByQuery
func (mr *MockRestClientMockRecorder) PostByQuery(resourcePath, queryParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostByQuery", reflect.TypeOf((*MockRestClient)(nil).PostByQuery), resourcePath, queryParams)
}

// PutByQuery mocks base method
func (m *MockRestClient) PutByQuery(resourcePath, is string, queryParams map[string]string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutByQuery", resourcePath, is, queryParams)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutByQuery indicates an expected call of PutByQuery
func (mr *MockRestClientMockRecorder) PutByQuery(resourcePath, is, queryParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutByQuery", reflect.TypeOf((*MockRestClient)(nil).PutByQuery), resourcePath, is, queryParams)
}
