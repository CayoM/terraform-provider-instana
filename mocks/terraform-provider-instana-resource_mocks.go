// Code generated by MockGen. DO NOT EDIT.
// Source: instana/terraform-provider-instana-resource.go

// Package mock_instana is a generated GoMock package.
package mocks

import (
	restapi "github.com/gessnerfl/terraform-provider-instana/instana/restapi"
	utils "github.com/gessnerfl/terraform-provider-instana/utils"
	gomock "github.com/golang/mock/gomock"
	schema "github.com/hashicorp/terraform/helper/schema"
	reflect "reflect"
)

// MockResourceHandle is a mock of ResourceHandle interface
type MockResourceHandle struct {
	ctrl     *gomock.Controller
	recorder *MockResourceHandleMockRecorder
}

// MockResourceHandleMockRecorder is the mock recorder for MockResourceHandle
type MockResourceHandleMockRecorder struct {
	mock *MockResourceHandle
}

// NewMockResourceHandle creates a new mock instance
func NewMockResourceHandle(ctrl *gomock.Controller) *MockResourceHandle {
	mock := &MockResourceHandle{ctrl: ctrl}
	mock.recorder = &MockResourceHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResourceHandle) EXPECT() *MockResourceHandleMockRecorder {
	return m.recorder
}

// GetResource mocks base method
func (m *MockResourceHandle) GetResource(api restapi.InstanaAPI) restapi.RestResource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResource", api)
	ret0, _ := ret[0].(restapi.RestResource)
	return ret0
}

// GetResource indicates an expected call of GetResource
func (mr *MockResourceHandleMockRecorder) GetResource(api interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockResourceHandle)(nil).GetResource), api)
}

// GetSchema mocks base method
func (m *MockResourceHandle) GetSchema() map[string]*schema.Schema {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchema")
	ret0, _ := ret[0].(map[string]*schema.Schema)
	return ret0
}

// GetSchema indicates an expected call of GetSchema
func (mr *MockResourceHandleMockRecorder) GetSchema() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchema", reflect.TypeOf((*MockResourceHandle)(nil).GetSchema))
}

// GetResourceName mocks base method
func (m *MockResourceHandle) GetResourceName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetResourceName indicates an expected call of GetResourceName
func (mr *MockResourceHandleMockRecorder) GetResourceName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceName", reflect.TypeOf((*MockResourceHandle)(nil).GetResourceName))
}

// UpdateState mocks base method
func (m *MockResourceHandle) UpdateState(d *schema.ResourceData, obj restapi.InstanaDataObject) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateState", d, obj)
}

// UpdateState indicates an expected call of UpdateState
func (mr *MockResourceHandleMockRecorder) UpdateState(d, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateState", reflect.TypeOf((*MockResourceHandle)(nil).UpdateState), d, obj)
}

// ConvertStateToDataObject mocks base method
func (m *MockResourceHandle) ConvertStateToDataObject(d *schema.ResourceData, formatter utils.ResourceNameFormatter) restapi.InstanaDataObject {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertStateToDataObject", d, formatter)
	ret0, _ := ret[0].(restapi.InstanaDataObject)
	return ret0
}

// ConvertStateToDataObject indicates an expected call of ConvertStateToDataObject
func (mr *MockResourceHandleMockRecorder) ConvertStateToDataObject(d, formatter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertStateToDataObject", reflect.TypeOf((*MockResourceHandle)(nil).ConvertStateToDataObject), d, formatter)
}

// MockTerraformResource is a mock of TerraformResource interface
type MockTerraformResource struct {
	ctrl     *gomock.Controller
	recorder *MockTerraformResourceMockRecorder
}

// MockTerraformResourceMockRecorder is the mock recorder for MockTerraformResource
type MockTerraformResourceMockRecorder struct {
	mock *MockTerraformResource
}

// NewMockTerraformResource creates a new mock instance
func NewMockTerraformResource(ctrl *gomock.Controller) *MockTerraformResource {
	mock := &MockTerraformResource{ctrl: ctrl}
	mock.recorder = &MockTerraformResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTerraformResource) EXPECT() *MockTerraformResourceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockTerraformResource) Create(d *schema.ResourceData, meta interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", d, meta)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockTerraformResourceMockRecorder) Create(d, meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTerraformResource)(nil).Create), d, meta)
}

// Read mocks base method
func (m *MockTerraformResource) Read(d *schema.ResourceData, meta interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", d, meta)
	ret0, _ := ret[0].(error)
	return ret0
}

// Read indicates an expected call of Read
func (mr *MockTerraformResourceMockRecorder) Read(d, meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockTerraformResource)(nil).Read), d, meta)
}

// Update mocks base method
func (m *MockTerraformResource) Update(d *schema.ResourceData, meta interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", d, meta)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockTerraformResourceMockRecorder) Update(d, meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTerraformResource)(nil).Update), d, meta)
}

// Delete mocks base method
func (m *MockTerraformResource) Delete(d *schema.ResourceData, meta interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", d, meta)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockTerraformResourceMockRecorder) Delete(d, meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTerraformResource)(nil).Delete), d, meta)
}

// ToSchemaResource mocks base method
func (m *MockTerraformResource) ToSchemaResource() *schema.Resource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSchemaResource")
	ret0, _ := ret[0].(*schema.Resource)
	return ret0
}

// ToSchemaResource indicates an expected call of ToSchemaResource
func (mr *MockTerraformResourceMockRecorder) ToSchemaResource() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSchemaResource", reflect.TypeOf((*MockTerraformResource)(nil).ToSchemaResource))
}
