// Code generated by MockGen. DO NOT EDIT.
// Source: instana/terraform-provider-instana-resource.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	schema "github.com/hashicorp/terraform/helper/schema"
	reflect "reflect"
)

// MockTerraformResource is a mock of TerraformResource interface
type MockTerraformResource struct {
	ctrl     *gomock.Controller
	recorder *MockTerraformResourceMockRecorder
}

// MockTerraformResourceMockRecorder is the mock recorder for MockTerraformResource
type MockTerraformResourceMockRecorder struct {
	mock *MockTerraformResource
}

// NewMockTerraformResource creates a new mock instance
func NewMockTerraformResource(ctrl *gomock.Controller) *MockTerraformResource {
	mock := &MockTerraformResource{ctrl: ctrl}
	mock.recorder = &MockTerraformResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTerraformResource) EXPECT() *MockTerraformResourceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockTerraformResource) Create(d *schema.ResourceData, meta interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", d, meta)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockTerraformResourceMockRecorder) Create(d, meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTerraformResource)(nil).Create), d, meta)
}

// Read mocks base method
func (m *MockTerraformResource) Read(d *schema.ResourceData, meta interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", d, meta)
	ret0, _ := ret[0].(error)
	return ret0
}

// Read indicates an expected call of Read
func (mr *MockTerraformResourceMockRecorder) Read(d, meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockTerraformResource)(nil).Read), d, meta)
}

// Update mocks base method
func (m *MockTerraformResource) Update(d *schema.ResourceData, meta interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", d, meta)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockTerraformResourceMockRecorder) Update(d, meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTerraformResource)(nil).Update), d, meta)
}

// Delete mocks base method
func (m *MockTerraformResource) Delete(d *schema.ResourceData, meta interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", d, meta)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockTerraformResourceMockRecorder) Delete(d, meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTerraformResource)(nil).Delete), d, meta)
}

// ToSchemaResource mocks base method
func (m *MockTerraformResource) ToSchemaResource() *schema.Resource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSchemaResource")
	ret0, _ := ret[0].(*schema.Resource)
	return ret0
}

// ToSchemaResource indicates an expected call of ToSchemaResource
func (mr *MockTerraformResourceMockRecorder) ToSchemaResource() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSchemaResource", reflect.TypeOf((*MockTerraformResource)(nil).ToSchemaResource))
}
