// Code generated by MockGen. DO NOT EDIT.
// Source: instana/restapi/instana-rest-resource.go

// Package mocks is a generated GoMock package.
package mocks

import (
	restapi "github.com/gessnerfl/terraform-provider-instana/instana/restapi"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockInstanaDataObject is a mock of InstanaDataObject interface
type MockInstanaDataObject struct {
	ctrl     *gomock.Controller
	recorder *MockInstanaDataObjectMockRecorder
}

// MockInstanaDataObjectMockRecorder is the mock recorder for MockInstanaDataObject
type MockInstanaDataObjectMockRecorder struct {
	mock *MockInstanaDataObject
}

// NewMockInstanaDataObject creates a new mock instance
func NewMockInstanaDataObject(ctrl *gomock.Controller) *MockInstanaDataObject {
	mock := &MockInstanaDataObject{ctrl: ctrl}
	mock.recorder = &MockInstanaDataObjectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInstanaDataObject) EXPECT() *MockInstanaDataObjectMockRecorder {
	return m.recorder
}

// GetID mocks base method
func (m *MockInstanaDataObject) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID
func (mr *MockInstanaDataObjectMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockInstanaDataObject)(nil).GetID))
}

// Validate mocks base method
func (m *MockInstanaDataObject) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate
func (mr *MockInstanaDataObjectMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockInstanaDataObject)(nil).Validate))
}

// MockRestResource is a mock of RestResource interface
type MockRestResource struct {
	ctrl     *gomock.Controller
	recorder *MockRestResourceMockRecorder
}

// MockRestResourceMockRecorder is the mock recorder for MockRestResource
type MockRestResourceMockRecorder struct {
	mock *MockRestResource
}

// NewMockRestResource creates a new mock instance
func NewMockRestResource(ctrl *gomock.Controller) *MockRestResource {
	mock := &MockRestResource{ctrl: ctrl}
	mock.recorder = &MockRestResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRestResource) EXPECT() *MockRestResourceMockRecorder {
	return m.recorder
}

// GetOne mocks base method
func (m *MockRestResource) GetOne(id string) (restapi.InstanaDataObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", id)
	ret0, _ := ret[0].(restapi.InstanaDataObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne
func (mr *MockRestResourceMockRecorder) GetOne(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockRestResource)(nil).GetOne), id)
}

// Upsert mocks base method
func (m *MockRestResource) Upsert(data restapi.InstanaDataObject) (restapi.InstanaDataObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", data)
	ret0, _ := ret[0].(restapi.InstanaDataObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upsert indicates an expected call of Upsert
func (mr *MockRestResourceMockRecorder) Upsert(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockRestResource)(nil).Upsert), data)
}

// Delete mocks base method
func (m *MockRestResource) Delete(data restapi.InstanaDataObject) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRestResourceMockRecorder) Delete(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRestResource)(nil).Delete), data)
}

// DeleteByID mocks base method
func (m *MockRestResource) DeleteByID(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID
func (mr *MockRestResourceMockRecorder) DeleteByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockRestResource)(nil).DeleteByID), id)
}

// MockUnmarshaller is a mock of Unmarshaller interface
type MockUnmarshaller struct {
	ctrl     *gomock.Controller
	recorder *MockUnmarshallerMockRecorder
}

// MockUnmarshallerMockRecorder is the mock recorder for MockUnmarshaller
type MockUnmarshallerMockRecorder struct {
	mock *MockUnmarshaller
}

// NewMockUnmarshaller creates a new mock instance
func NewMockUnmarshaller(ctrl *gomock.Controller) *MockUnmarshaller {
	mock := &MockUnmarshaller{ctrl: ctrl}
	mock.recorder = &MockUnmarshallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUnmarshaller) EXPECT() *MockUnmarshallerMockRecorder {
	return m.recorder
}

// Unmarshal mocks base method
func (m *MockUnmarshaller) Unmarshal(data []byte) (restapi.InstanaDataObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshal", data)
	ret0, _ := ret[0].(restapi.InstanaDataObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unmarshal indicates an expected call of Unmarshal
func (mr *MockUnmarshallerMockRecorder) Unmarshal(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockUnmarshaller)(nil).Unmarshal), data)
}
