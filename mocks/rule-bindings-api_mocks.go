// Code generated by MockGen. DO NOT EDIT.
// Source: instana/restapi/rule-bindings-api.go

// Package mock_restapi is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	x "github.com/gessnerfl/terraform-provider-instana/instana/restapi"
	gomock "github.com/golang/mock/gomock"
)

// MockRuleBindingResource is a mock of RuleBindingResource interface
type MockRuleBindingResource struct {
	ctrl     *gomock.Controller
	recorder *MockRuleBindingResourceMockRecorder
}

// MockRuleBindingResourceMockRecorder is the mock recorder for MockRuleBindingResource
type MockRuleBindingResourceMockRecorder struct {
	mock *MockRuleBindingResource
}

// NewMockRuleBindingResource creates a new mock instance
func NewMockRuleBindingResource(ctrl *gomock.Controller) *MockRuleBindingResource {
	mock := &MockRuleBindingResource{ctrl: ctrl}
	mock.recorder = &MockRuleBindingResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRuleBindingResource) EXPECT() *MockRuleBindingResourceMockRecorder {
	return m.recorder
}

// GetOne mocks base method
func (m *MockRuleBindingResource) GetOne(id string) (x.RuleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", id)
	ret0, _ := ret[0].(x.RuleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne
func (mr *MockRuleBindingResourceMockRecorder) GetOne(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockRuleBindingResource)(nil).GetOne), id)
}

// GetAll mocks base method
func (m *MockRuleBindingResource) GetAll() ([]x.RuleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]x.RuleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockRuleBindingResourceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRuleBindingResource)(nil).GetAll))
}

// Upsert mocks base method
func (m *MockRuleBindingResource) Upsert(rule x.RuleBinding) (x.RuleBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", rule)
	ret0, _ := ret[0].(x.RuleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upsert indicates an expected call of Upsert
func (mr *MockRuleBindingResourceMockRecorder) Upsert(rule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockRuleBindingResource)(nil).Upsert), rule)
}

// Delete mocks base method
func (m *MockRuleBindingResource) Delete(rule x.RuleBinding) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", rule)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRuleBindingResourceMockRecorder) Delete(rule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRuleBindingResource)(nil).Delete), rule)
}

// DeleteByID mocks base method
func (m *MockRuleBindingResource) DeleteByID(ruleID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ruleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID
func (mr *MockRuleBindingResourceMockRecorder) DeleteByID(ruleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockRuleBindingResource)(nil).DeleteByID), ruleID)
}
