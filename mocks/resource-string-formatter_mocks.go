// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/gessnerfl/git/terraform-provider-instana/instana/resources-string-formatter.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockResourceStringFormatter is a mock of ResourceStringFormatter interface
type MockResourceStringFormatter struct {
	ctrl     *gomock.Controller
	recorder *MockResourceStringFormatterMockRecorder
}

// MockResourceStringFormatterMockRecorder is the mock recorder for MockResourceStringFormatter
type MockResourceStringFormatterMockRecorder struct {
	mock *MockResourceStringFormatter
}

// NewMockResourceStringFormatter creates a new mock instance
func NewMockResourceStringFormatter(ctrl *gomock.Controller) *MockResourceStringFormatter {
	mock := &MockResourceStringFormatter{ctrl: ctrl}
	mock.recorder = &MockResourceStringFormatterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResourceStringFormatter) EXPECT() *MockResourceStringFormatterMockRecorder {
	return m.recorder
}

// FormatName mocks base method
func (m *MockResourceStringFormatter) FormatName(name string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatName", name)
	ret0, _ := ret[0].(string)
	return ret0
}

// FormatName indicates an expected call of FormatName
func (mr *MockResourceStringFormatterMockRecorder) FormatName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatName", reflect.TypeOf((*MockResourceStringFormatter)(nil).FormatName), name)
}

// FormatDescription mocks base method
func (m *MockResourceStringFormatter) FormatDescription(description string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatDescription", description)
	ret0, _ := ret[0].(string)
	return ret0
}

// FormatDescription indicates an expected call of FormatDescription
func (mr *MockResourceStringFormatterMockRecorder) FormatDescription(description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatDescription", reflect.TypeOf((*MockResourceStringFormatter)(nil).FormatDescription), description)
}

// UndoFormatName mocks base method
func (m *MockResourceStringFormatter) UndoFormatName(name string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UndoFormatName", name)
	ret0, _ := ret[0].(string)
	return ret0
}

// UndoFormatName indicates an expected call of UndoFormatName
func (mr *MockResourceStringFormatterMockRecorder) UndoFormatName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UndoFormatName", reflect.TypeOf((*MockResourceStringFormatter)(nil).UndoFormatName), name)
}

// UndoFormatDescription mocks base method
func (m *MockResourceStringFormatter) UndoFormatDescription(description string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UndoFormatDescription", description)
	ret0, _ := ret[0].(string)
	return ret0
}

// UndoFormatDescription indicates an expected call of UndoFormatDescription
func (mr *MockResourceStringFormatterMockRecorder) UndoFormatDescription(description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UndoFormatDescription", reflect.TypeOf((*MockResourceStringFormatter)(nil).UndoFormatDescription), description)
}
