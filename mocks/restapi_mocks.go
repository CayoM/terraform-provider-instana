// Code generated by MockGen. DO NOT EDIT.
// Source: instana/restapi/api.go

// Package mock_restapi is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	restapi "github.com/gessnerfl/terraform-provider-instana/instana/restapi"
	gomock "github.com/golang/mock/gomock"
)

// MockInstanaDataObject is a mock of InstanaDataObject interface
type MockInstanaDataObject struct {
	ctrl     *gomock.Controller
	recorder *MockInstanaDataObjectMockRecorder
}

// MockInstanaDataObjectMockRecorder is the mock recorder for MockInstanaDataObject
type MockInstanaDataObjectMockRecorder struct {
	mock *MockInstanaDataObject
}

// NewMockInstanaDataObject creates a new mock instance
func NewMockInstanaDataObject(ctrl *gomock.Controller) *MockInstanaDataObject {
	mock := &MockInstanaDataObject{ctrl: ctrl}
	mock.recorder = &MockInstanaDataObjectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInstanaDataObject) EXPECT() *MockInstanaDataObjectMockRecorder {
	return m.recorder
}

// GetID mocks base method
func (m *MockInstanaDataObject) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID
func (mr *MockInstanaDataObjectMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockInstanaDataObject)(nil).GetID))
}

// Validate mocks base method
func (m *MockInstanaDataObject) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate
func (mr *MockInstanaDataObjectMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockInstanaDataObject)(nil).Validate))
}

// MockRestClient is a mock of RestClient interface
type MockRestClient struct {
	ctrl     *gomock.Controller
	recorder *MockRestClientMockRecorder
}

// MockRestClientMockRecorder is the mock recorder for MockRestClient
type MockRestClientMockRecorder struct {
	mock *MockRestClient
}

// NewMockRestClient creates a new mock instance
func NewMockRestClient(ctrl *gomock.Controller) *MockRestClient {
	mock := &MockRestClient{ctrl: ctrl}
	mock.recorder = &MockRestClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRestClient) EXPECT() *MockRestClientMockRecorder {
	return m.recorder
}

// GetOne mocks base method
func (m *MockRestClient) GetOne(id, resourcePath string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", id, resourcePath)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne
func (mr *MockRestClientMockRecorder) GetOne(id, resourcePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockRestClient)(nil).GetOne), id, resourcePath)
}

// Put mocks base method
func (m *MockRestClient) Put(data restapi.InstanaDataObject, resourcePath string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", data, resourcePath)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put
func (mr *MockRestClientMockRecorder) Put(data, resourcePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockRestClient)(nil).Put), data, resourcePath)
}

// Delete mocks base method
func (m *MockRestClient) Delete(resourceID, resourceBasePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", resourceID, resourceBasePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRestClientMockRecorder) Delete(resourceID, resourceBasePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRestClient)(nil).Delete), resourceID, resourceBasePath)
}

// MockRestResource is a mock of RestResource interface
type MockRestResource struct {
	ctrl     *gomock.Controller
	recorder *MockRestResourceMockRecorder
}

// MockRestResourceMockRecorder is the mock recorder for MockRestResource
type MockRestResourceMockRecorder struct {
	mock *MockRestResource
}

// NewMockRestResource creates a new mock instance
func NewMockRestResource(ctrl *gomock.Controller) *MockRestResource {
	mock := &MockRestResource{ctrl: ctrl}
	mock.recorder = &MockRestResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRestResource) EXPECT() *MockRestResourceMockRecorder {
	return m.recorder
}

// GetOne mocks base method
func (m *MockRestResource) GetOne(id string) (restapi.InstanaDataObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", id)
	ret0, _ := ret[0].(restapi.InstanaDataObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne
func (mr *MockRestResourceMockRecorder) GetOne(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockRestResource)(nil).GetOne), id)
}

// Upsert mocks base method
func (m *MockRestResource) Upsert(data restapi.InstanaDataObject) (restapi.InstanaDataObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", data)
	ret0, _ := ret[0].(restapi.InstanaDataObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upsert indicates an expected call of Upsert
func (mr *MockRestResourceMockRecorder) Upsert(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockRestResource)(nil).Upsert), data)
}

// Delete mocks base method
func (m *MockRestResource) Delete(data restapi.InstanaDataObject) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRestResourceMockRecorder) Delete(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRestResource)(nil).Delete), data)
}

// DeleteByID mocks base method
func (m *MockRestResource) DeleteByID(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID
func (mr *MockRestResourceMockRecorder) DeleteByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockRestResource)(nil).DeleteByID), id)
}

// MockInstanaAPI is a mock of InstanaAPI interface
type MockInstanaAPI struct {
	ctrl     *gomock.Controller
	recorder *MockInstanaAPIMockRecorder
}

// MockInstanaAPIMockRecorder is the mock recorder for MockInstanaAPI
type MockInstanaAPIMockRecorder struct {
	mock *MockInstanaAPI
}

// NewMockInstanaAPI creates a new mock instance
func NewMockInstanaAPI(ctrl *gomock.Controller) *MockInstanaAPI {
	mock := &MockInstanaAPI{ctrl: ctrl}
	mock.recorder = &MockInstanaAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInstanaAPI) EXPECT() *MockInstanaAPIMockRecorder {
	return m.recorder
}

// CustomEventSpecifications mocks base method
func (m *MockInstanaAPI) CustomEventSpecifications() restapi.RestResource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomEventSpecifications")
	ret0, _ := ret[0].(restapi.RestResource)
	return ret0
}

// CustomEventSpecifications indicates an expected call of CustomEventSpecifications
func (mr *MockInstanaAPIMockRecorder) CustomEventSpecifications() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomEventSpecifications", reflect.TypeOf((*MockInstanaAPI)(nil).CustomEventSpecifications))
}

// UserRoles mocks base method
func (m *MockInstanaAPI) UserRoles() restapi.RestResource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRoles")
	ret0, _ := ret[0].(restapi.RestResource)
	return ret0
}

// UserRoles indicates an expected call of UserRoles
func (mr *MockInstanaAPIMockRecorder) UserRoles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRoles", reflect.TypeOf((*MockInstanaAPI)(nil).UserRoles))
}

// ApplicationConfigs mocks base method
func (m *MockInstanaAPI) ApplicationConfigs() restapi.RestResource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationConfigs")
	ret0, _ := ret[0].(restapi.RestResource)
	return ret0
}

// ApplicationConfigs indicates an expected call of ApplicationConfigs
func (mr *MockInstanaAPIMockRecorder) ApplicationConfigs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationConfigs", reflect.TypeOf((*MockInstanaAPI)(nil).ApplicationConfigs))
}

// AlertingChannels mocks base method
func (m *MockInstanaAPI) AlertingChannels() restapi.RestResource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlertingChannels")
	ret0, _ := ret[0].(restapi.RestResource)
	return ret0
}

// AlertingChannels indicates an expected call of AlertingChannels
func (mr *MockInstanaAPIMockRecorder) AlertingChannels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlertingChannels", reflect.TypeOf((*MockInstanaAPI)(nil).AlertingChannels))
}

// AlertingConfigurations mocks base method
func (m *MockInstanaAPI) AlertingConfigurations() restapi.RestResource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlertingConfigurations")
	ret0, _ := ret[0].(restapi.RestResource)
	return ret0
}

// AlertingConfigurations indicates an expected call of AlertingConfigurations
func (mr *MockInstanaAPIMockRecorder) AlertingConfigurations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlertingConfigurations", reflect.TypeOf((*MockInstanaAPI)(nil).AlertingConfigurations))
}
