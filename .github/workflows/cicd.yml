name: CICD

on:
  - push
  - pull_request

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.15.0'

    - name: Get version number
      id: get_version
      run: echo ::set-output name=VERSION::$(git describe --tags --match "v*" --always --dirty)

    - name: Install dependencies
      run: |
        go version
        go get -u golang.org/x/lint/golint
        go get -u github.com/securego/gosec/cmd/gosec

    - name: Run build
      run: go build . 
      
    - name: Run vet & lint & sec
      run: |
        mkdir -p output
        go vet -all ./... 2> output/govet-report.out
        golint -set_exit_status `go list ./...` > output/golint-report.out
#        gosec -fmt=sonarqube -out output/gosec-report.json ./...  
    
    - name: Run testing
      run: go test ./... -cover -coverprofile=output/coverage.out -json > output/unit-test-report.json

    - name: Run sonar
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}
      with:
        args: >
          -Dsonar.projectVersion=${{ steps.get_version.outputs.VERSION }}
  
  release:
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ contains(github.ref, 'refs/tags/v') && github.event_name == 'push' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Unshallow
        run: git fetch --prune --unshallow

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.15.0

      - name: Import GPG key
        id: import_gpg
        uses: paultyng/ghaction-import-gpg@v2.1.0
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      -
        name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --rm-dist
        env:
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}