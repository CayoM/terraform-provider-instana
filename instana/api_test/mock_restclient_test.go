// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/gessnerfl/terraform-provider-instana/instana/api (interfaces: RestClient)

package api_test

import (
	api "github.com/gessnerfl/terraform-provider-instana/instana/api"
	pegomock "github.com/petergtz/pegomock"
	"reflect"
	"time"
)

type MockRestClient struct {
	fail func(message string, callerSkip ...int)
}

func NewMockRestClient(options ...pegomock.Option) *MockRestClient {
	mock := &MockRestClient{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockRestClient) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockRestClient) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockRestClient) Delete(_param0 string, _param1 string) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRestClient().")
	}
	params := []pegomock.Param{_param0, _param1}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Delete", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockRestClient) GetAll(_param0 string) ([]byte, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRestClient().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GetAll", params, []reflect.Type{reflect.TypeOf((*[]byte)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 []byte
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].([]byte)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockRestClient) GetOne(_param0 string, _param1 string) ([]byte, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRestClient().")
	}
	params := []pegomock.Param{_param0, _param1}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GetOne", params, []reflect.Type{reflect.TypeOf((*[]byte)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 []byte
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].([]byte)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockRestClient) Put(_param0 api.InstanaDataObject, _param1 string) ([]byte, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockRestClient().")
	}
	params := []pegomock.Param{_param0, _param1}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Put", params, []reflect.Type{reflect.TypeOf((*[]byte)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 []byte
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].([]byte)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockRestClient) VerifyWasCalledOnce() *VerifierMockRestClient {
	return &VerifierMockRestClient{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockRestClient) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierMockRestClient {
	return &VerifierMockRestClient{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockRestClient) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierMockRestClient {
	return &VerifierMockRestClient{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockRestClient) VerifyWasCalledEventually(invocationCountMatcher pegomock.Matcher, timeout time.Duration) *VerifierMockRestClient {
	return &VerifierMockRestClient{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockRestClient struct {
	mock                   *MockRestClient
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockRestClient) Delete(_param0 string, _param1 string) *MockRestClient_Delete_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Delete", params, verifier.timeout)
	return &MockRestClient_Delete_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRestClient_Delete_OngoingVerification struct {
	mock              *MockRestClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRestClient_Delete_OngoingVerification) GetCapturedArguments() (string, string) {
	_param0, _param1 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1]
}

func (c *MockRestClient_Delete_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([]string, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierMockRestClient) GetAll(_param0 string) *MockRestClient_GetAll_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetAll", params, verifier.timeout)
	return &MockRestClient_GetAll_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRestClient_GetAll_OngoingVerification struct {
	mock              *MockRestClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRestClient_GetAll_OngoingVerification) GetCapturedArguments() string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *MockRestClient_GetAll_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierMockRestClient) GetOne(_param0 string, _param1 string) *MockRestClient_GetOne_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetOne", params, verifier.timeout)
	return &MockRestClient_GetOne_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRestClient_GetOne_OngoingVerification struct {
	mock              *MockRestClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRestClient_GetOne_OngoingVerification) GetCapturedArguments() (string, string) {
	_param0, _param1 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1]
}

func (c *MockRestClient_GetOne_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([]string, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierMockRestClient) Put(_param0 api.InstanaDataObject, _param1 string) *MockRestClient_Put_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Put", params, verifier.timeout)
	return &MockRestClient_Put_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockRestClient_Put_OngoingVerification struct {
	mock              *MockRestClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockRestClient_Put_OngoingVerification) GetCapturedArguments() (api.InstanaDataObject, string) {
	_param0, _param1 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1]
}

func (c *MockRestClient_Put_OngoingVerification) GetAllCapturedArguments() (_param0 []api.InstanaDataObject, _param1 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]api.InstanaDataObject, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(api.InstanaDataObject)
		}
		_param1 = make([]string, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(string)
		}
	}
	return
}
